[package]
name = "libz-rs-sys-cdylib"
version = "0.5.0"
edition = "2021"
readme = "README.md"
license = "Zlib"
repository = "https://github.com/trifectatechfoundation/zlib-rs"
homepage = "https://github.com/trifectatechfoundation/zlib-rs"
publish = true
description = "A memory-safe zlib implementation written in rust"
rust-version = "1.75" # MSRV

[lib]
name = "z_rs" # turns into e.g. `libz_rs.so`
crate-type = ["cdylib", "lib"]

[profile.dev]
panic = "abort" # abort on panics. This is crucial, unwinding would cause UB!

[profile.release]
panic = "abort" # abort on panics. This is crucial, unwinding would cause UB!

[features]
default = ["c-allocator"] # when used as a cdylib crate, use the c allocator
c-allocator = ["libz-rs-sys/c-allocator"] # by default, use malloc/free for memory allocation
rust-allocator = ["libz-rs-sys/rust-allocator", "libz-rs-sys/std"] # by default, use the rust global alloctor for memory allocation
custom-prefix = ["libz-rs-sys/custom-prefix"] # use the LIBZ_RS_SYS_PREFIX to prefix all exported symbols
semver-prefix = ["libz-rs-sys/semver-prefix"] # prefix all symbols in a semver-compatible way
capi = []
gz = ["dep:libc"] # gzip support has to be configured explicitly, to avoid a libc dependency in the core zlib-rs
std = ["zlib-rs/std"] # assume `::std` is available

[dependencies]
libz-rs-sys = { version = "0.5.0", path = "../libz-rs-sys", default-features = false, features = ["export-symbols"] }
zlib-rs = { version = "0.5.0", path = "../zlib-rs", default-features = false }
libc = { version = "0.2.171", optional = true }

[package.metadata.capi.library]
version = "1.3.0" # the zlib api version we match
name = "z_rs"

[package.metadata.capi.header]
enabled = false

[package.metadata.capi.pkg_config]
name = "libz_rs"
filename = "libz_rs"
